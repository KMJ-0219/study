<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>세특 관리 시스템 - 주제 세부 설명</title>
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2.39.3/dist/umd/supabase.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        /* 헤더 스타일 */
        header {
            background: white;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            position: sticky;
            top: 0;
            z-index: 1000;
        }

        .header-content {
            max-width: 1200px;
            margin: 0 auto;
            padding: 1rem 2rem;
        }

        h1 {
            color: #667eea;
            font-size: 1.8rem;
            margin-bottom: 1rem;
        }

        /* GNB 스타일 */
        nav {
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
        }

        nav a {
            text-decoration: none;
            color: #555;
            padding: 0.7rem 1.5rem;
            border-radius: 8px;
            transition: all 0.3s ease;
            font-weight: 500;
            background: #f8f9fa;
        }

        nav a:hover {
            background: #667eea;
            color: white;
            transform: translateY(-2px);
        }

        /* 컨테이너 */
        .container {
            max-width: 1000px;
            margin: 2rem auto;
            padding: 0 2rem;
        }

        /* 메인 컨텐츠 카드 */
        .detail-card {
            background: white;
            border-radius: 20px;
            padding: 3rem;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            margin-bottom: 2rem;
        }

        .detail-title {
            font-size: 2.5rem;
            font-weight: 700;
            color: #667eea;
            margin-bottom: 2rem;
            border-bottom: 3px solid #667eea;
            padding-bottom: 1rem;
        }

        .detail-section {
            margin-bottom: 2rem;
        }

        .detail-row {
            display: flex;
            gap: 2rem;
            margin-bottom: 1rem;
            flex-wrap: wrap;
        }

        .detail-item {
            flex: 1;
            min-width: 200px;
        }

        .detail-label {
            font-weight: 600;
            color: #555;
            margin-bottom: 0.5rem;
            font-size: 0.95rem;
        }

        .detail-value {
            color: #333;
            font-size: 1.05rem;
            line-height: 1.6;
        }

        .divider {
            height: 1px;
            background: #e0e0e0;
            margin: 2rem 0;
        }

        /* 사용여부 배지 */
        .use-status {
            display: inline-block;
            padding: 0.5rem 1.5rem;
            border-radius: 25px;
            font-weight: 600;
            font-size: 1.1rem;
        }

        .use-status.used {
            background: #e3f2fd;
            color: #1976d2;
        }

        .use-status.unused {
            background: #fce4ec;
            color: #c2185b;
        }

        /* 아코디언 스타일 */
        .accordion {
            border: 2px solid #e0e0e0;
            border-radius: 12px;
            margin-bottom: 1.5rem;
            overflow: hidden;
        }

        .accordion-header {
            background: #f8f9fa;
            padding: 1.2rem 1.5rem;
            cursor: pointer;
            display: flex;
            justify-content: space-between;
            align-items: center;
            transition: background 0.3s;
            font-weight: 600;
            font-size: 1.1rem;
            color: #333;
        }

        .accordion-header:hover {
            background: #e9ecef;
        }

        .accordion-header.active {
            background: #667eea;
            color: white;
        }

        .accordion-icon {
            transition: transform 0.3s;
            font-size: 1.2rem;
        }

        .accordion-header.active .accordion-icon {
            transform: rotate(180deg);
        }

        .accordion-content {
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.4s ease;
            background: white;
        }

        .accordion-content.active {
            max-height: 1000px;
        }

        .accordion-body {
            padding: 2rem 1.5rem;
        }

        /* 버튼 스타일 */
        .button-group {
            display: flex;
            gap: 1rem;
            margin-top: 2rem;
            flex-wrap: wrap;
        }

        .btn {
            padding: 0.9rem 2rem;
            border: none;
            border-radius: 10px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-block;
        }

        .btn-primary {
            background: #667eea;
            color: white;
        }

        .btn-primary:hover {
            background: #5568d3;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        .btn-secondary:hover {
            background: #5a6268;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(108, 117, 125, 0.4);
        }

        .btn-danger {
            background: #dc3545;
            color: white;
        }

        .btn-danger:hover {
            background: #c82333;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(220, 53, 69, 0.4);
        }

        .btn-file {
            background: #28a745;
            color: white;
            padding: 0.7rem 1.5rem;
            font-size: 0.95rem;
        }

        .btn-file:hover {
            background: #218838;
        }

        /* 모달 스타일 */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.6);
            z-index: 2000;
            justify-content: center;
            align-items: center;
        }

        .modal.active {
            display: flex;
        }

        .modal-content {
            background: white;
            border-radius: 15px;
            padding: 2.5rem;
            max-width: 450px;
            width: 90%;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.3);
            animation: modalSlideIn 0.3s ease;
        }

        @keyframes modalSlideIn {
            from {
                transform: translateY(-50px);
                opacity: 0;
            }
            to {
                transform: translateY(0);
                opacity: 1;
            }
        }

        .modal-header {
            font-size: 1.5rem;
            font-weight: 700;
            color: #333;
            margin-bottom: 1rem;
        }

        .modal-body {
            color: #666;
            margin-bottom: 2rem;
            line-height: 1.6;
        }

        .modal-buttons {
            display: flex;
            gap: 1rem;
            justify-content: flex-end;
        }

        /* 로딩 및 메시지 */
        .message {
            text-align: center;
            padding: 3rem;
            background: white;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

        .message h2 {
            color: #667eea;
            margin-bottom: 1rem;
        }

        /* 반응형 디자인 */
        @media (max-width: 768px) {
            .header-content {
                padding: 1rem;
            }

            h1 {
                font-size: 1.5rem;
            }

            nav a {
                padding: 0.5rem 1rem;
                font-size: 0.9rem;
            }

            .container {
                padding: 0 1rem;
                margin: 1rem auto;
            }

            .detail-card {
                padding: 2rem 1.5rem;
            }

            .detail-title {
                font-size: 1.8rem;
            }

            .detail-row {
                flex-direction: column;
                gap: 1rem;
            }

            .button-group {
                flex-direction: column;
            }

            .btn {
                width: 100%;
                text-align: center;
            }

            .modal-content {
                padding: 2rem 1.5rem;
            }
        }

        @media (max-width: 480px) {
            h1 {
                font-size: 1.2rem;
            }

            nav a {
                padding: 0.4rem 0.8rem;
                font-size: 0.85rem;
            }

            .detail-title {
                font-size: 1.5rem;
            }
        }
    </style>
</head>
<body>
    <header>
        <div class="header-content">
            <h1>HOMEPAGE</h1>
            <nav>
                <a href="index.html">홈페이지</a>
                <a href="profile.html">프로파일링</a>
                <a href="search.html">주제 찾기</a>
                <a href="add_content.html">주제 추가</a>
            </nav>
        </div>
    </header>

    <div class="container">
        <div id="detailContainer">
            <!-- 상세 내용이 동적으로 추가됩니다 -->
        </div>

        <div id="messageArea" class="message" style="display: none;">
            <h2>로딩 중...</h2>
        </div>
    </div>

    <!-- 삭제 확인 모달 -->
    <div id="deleteModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">⚠️ 삭제 확인</div>
            <div class="modal-body">
                정말로 이 주제를 삭제하시겠습니까?<br>
                삭제된 데이터는 복구할 수 없습니다.
            </div>
            <div class="modal-buttons">
                <button class="btn btn-secondary" onclick="closeDeleteModal()">취소</button>
                <button class="btn btn-danger" onclick="confirmDelete()">삭제</button>
            </div>
        </div>
    </div>

    <script>
        // Supabase 초기화
        const SUPABASE_URL = 'https://sgzgblsirnorodulhper.supabase.co';
        const SUPABASE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNnemdibHNpcm5vcm9kdWxocGVyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjA2ODU2MDAsImV4cCI6MjA3NjI2MTYwMH0.nfFzi2lSvplXs7JoIMC-jdvqmxj_NpvVMYspPfGZWQs';
        const supabase = window.supabase.createClient(SUPABASE_URL, SUPABASE_KEY);

        let currentContent = null;
        let contentId = null;

        // URL에서 ID 가져오기
        function getContentId() {
            // 여러 방법으로 ID 추출 시도
            const urlParams = new URLSearchParams(window.location.search);
            let id = urlParams.get('id');
            
            // URL에서 직접 파싱 시도
            if (!id) {
                const match = window.location.href.match(/[?&]id=([^&]+)/);
                if (match) {
                    id = match[1];
                }
            }
            
            // 해시에서 파싱 시도
            if (!id && window.location.hash) {
                const hashMatch = window.location.hash.match(/id=([^&]+)/);
                if (hashMatch) {
                    id = hashMatch[1];
                }
            }
            
            console.log('=== ID 추출 정보 ===');
            console.log('전체 URL:', window.location.href);
            console.log('Search:', window.location.search);
            console.log('Hash:', window.location.hash);
            console.log('추출된 ID:', id);
            console.log('==================');
            
            return id;
        }

        // 데이터 로드
        async function loadContent() {
            try {
                contentId = getContentId();
                
                if (!contentId) {
                    showMessage(`잘못된 접근입니다. ID가 없습니다. (현재 URL: ${window.location.href})`);
                    console.error('ID를 찾을 수 없습니다.');
                    setTimeout(() => {
                        window.location.href = 'search.html';
                    }, 3000);
                    return;
                }

                console.log('로딩할 콘텐츠 ID:', contentId);
                showMessage('데이터를 불러오는 중...');
                
                const { data, error } = await supabase
                    .from('content')
                    .select('*')
                    .eq('id', contentId)
                    .single();

                console.log('Supabase 응답:', { data, error });

                if (error) {
                    console.error('Supabase 에러:', error);
                    throw error;
                }
                
                if (!data) {
                    showMessage('해당 ID의 데이터를 찾을 수 없습니다.');
                    setTimeout(() => {
                        window.location.href = 'search.html';
                    }, 3000);
                    return;
                }

                currentContent = data;
                console.log('로드된 데이터:', data);
                renderContent(data);
                hideMessage();
                
            } catch (error) {
                console.error('데이터 로딩 에러:', error);
                showMessage(`데이터를 불러오는데 실패했습니다. 에러: ${error.message}`);
                setTimeout(() => {
                    window.location.href = 'search.html';
                }, 3000);
            }
        }

        // 콘텐츠 렌더링
        function renderContent(content) {
            const container = document.getElementById('detailContainer');
            
            // 배열 데이터 처리
            const categories = Array.isArray(content.category) 
                ? content.category.join(', ') 
                : content.category || '-';
            
            const highContent = Array.isArray(content.high_content)
                ? content.high_content.join(', ')
                : content.high_content || '-';
            
            const relevanceContent = Array.isArray(content.relevance_content)
                ? content.relevance_content.join(', ')
                : content.relevance_content || '-';
            
            const relevanceUsContent = Array.isArray(content.relevance_us_content)
                ? content.relevance_us_content.join(', ')
                : content.relevance_us_content || '-';
            
            // 사용여부
            const isUsed = content.use === true;
            const useStatusClass = isUsed ? 'used' : 'unused';
            const useStatusText = isUsed ? 'O' : 'X';

            container.innerHTML = `
                <div class="detail-card">
                    <div class="detail-title">${content.name || '제목 없음'}</div>
                    
                    <div class="detail-section">
                        <div class="detail-item">
                            <div class="detail-label">카테고리</div>
                            <div class="detail-value">${categories}</div>
                        </div>
                    </div>

                    <div class="detail-row">
                        <div class="detail-item">
                            <div class="detail-label">상위개념</div>
                            <div class="detail-value">${highContent}</div>
                        </div>
                        <div class="detail-item">
                            <div class="detail-label">연관주제</div>
                            <div class="detail-value">${relevanceContent}</div>
                        </div>
                    </div>

                    <div class="divider"></div>

                    <div class="detail-section">
                        <div class="detail-label" style="margin-bottom: 1rem;">사용여부</div>
                        <span class="use-status ${useStatusClass}">${useStatusText}</span>
                    </div>

                    ${isUsed ? `
                        <div class="accordion">
                            <div class="accordion-header" onclick="toggleAccordion('usage')">
                                <span>사용 정보 보기</span>
                                <span class="accordion-icon">▼</span>
                            </div>
                            <div class="accordion-content" id="usageAccordion">
                                <div class="accordion-body">
                                    <div class="detail-row">
                                        <div class="detail-item">
                                            <div class="detail-label">사용학년학기</div>
                                            <div class="detail-value">${content.us_time || '-'}</div>
                                        </div>
                                        <div class="detail-item">
                                            <div class="detail-label">사용과목</div>
                                            <div class="detail-value">${content.us_subject || '-'}</div>
                                        </div>
                                    </div>
                                    <div class="detail-section">
                                        <div class="detail-label">세특 내용</div>
                                        <div class="detail-value">${content.us_content_m || '-'}</div>
                                    </div>
                                    <div class="detail-section">
                                        <div class="detail-label">연관세특주제</div>
                                        <div class="detail-value">${relevanceUsContent}</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    ` : ''}

                    <div class="accordion">
                        <div class="accordion-header" onclick="toggleAccordion('detail')">
                            <span>상세 보기</span>
                            <span class="accordion-icon">▼</span>
                        </div>
                        <div class="accordion-content" id="detailAccordion">
                            <div class="accordion-body">
                                ${content.file ? `
                                    <div class="detail-section">
                                        <button class="btn btn-file" onclick="openFile('${content.file}')">📁 파일 열기</button>
                                    </div>
                                ` : ''}
                                <div class="detail-section">
                                    <div class="detail-label">내용</div>
                                    <div class="detail-value">${content.detail || '-'}</div>
                                </div>
                                ${content.link_site ? `
                                    <div class="detail-section">
                                        <div class="detail-label">사이트</div>
                                        <div class="detail-value">
                                            <a href="${content.link_site}" target="_blank" style="color: #667eea; text-decoration: underline;">
                                                ${content.link_site}
                                            </a>
                                        </div>
                                    </div>
                                ` : ''}
                                <div class="detail-section">
                                    <div class="detail-label">기타</div>
                                    <div class="detail-value">${content.additional || '-'}</div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="button-group">
                        <button class="btn btn-primary" onclick="goToEdit()">✏️ 수정</button>
                        <button class="btn btn-danger" onclick="openDeleteModal()">🗑️ 삭제</button>
                        <button class="btn btn-secondary" onclick="goBack()">← 돌아가기</button>
                    </div>
                </div>
            `;
        }

        // 아코디언 토글
        function toggleAccordion(type) {
            const accordionId = type === 'usage' ? 'usageAccordion' : 'detailAccordion';
            const accordion = document.getElementById(accordionId);
            const header = accordion.previousElementSibling;
            
            header.classList.toggle('active');
            accordion.classList.toggle('active');
        }

        // 파일 열기
        function openFile(fileUrl) {
            if (fileUrl) {
                window.open(fileUrl, '_blank');
            } else {
                alert('파일이 없습니다.');
            }
        }

        // 수정 페이지로 이동
        function goToEdit() {
            if (confirm('이 주제를 수정하시겠습니까?')) {
                window.location.href = `recover_content.html?id=${contentId}`;
            }
        }

        // 돌아가기
        function goBack() {
            window.location.href = 'search.html';
        }

        // 삭제 모달 열기
        function openDeleteModal() {
            document.getElementById('deleteModal').classList.add('active');
        }

        // 삭제 모달 닫기
        function closeDeleteModal() {
            document.getElementById('deleteModal').classList.remove('active');
        }

        // 삭제 확인
        async function confirmDelete() {
            try {
                const { error } = await supabase
                    .from('content')
                    .delete()
                    .eq('id', contentId);

                if (error) throw error;

                alert('삭제되었습니다.');
                window.location.href = 'search.html';
                
            } catch (error) {
                console.error('삭제 에러:', error);
                alert('삭제에 실패했습니다.');
            }
        }

        // 메시지 표시/숨김
        function showMessage(text) {
            const messageArea = document.getElementById('messageArea');
            messageArea.querySelector('h2').textContent = text;
            messageArea.style.display = 'block';
            document.getElementById('detailContainer').style.display = 'none';
        }

        function hideMessage() {
            document.getElementById('messageArea').style.display = 'none';
            document.getElementById('detailContainer').style.display = 'block';
        }

        // 초기 로드
        window.addEventListener('DOMContentLoaded', loadContent);
    </script>
</body>
</html>